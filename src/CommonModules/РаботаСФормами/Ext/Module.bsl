////////////////////////////////////////////////////////////////////////////////
// Программная работа с формами
// В модуле содержатся методы для программного формирования интерфейса форм
////////////////////////////////////////////////////////////////////////////////

#Область ОписаниеТипов

#Область ОтсутствуетБСП_ОписаниеТипов
// Для совместимости с конфигурациями без БСП
// Использовать методы этой области, если в конфигурации не внедрена БСП
//#Если Не Сервер И Сервер Тогда

// Создает объект ОписаниеТипов, содержащий тип Строка.
//
// Параметры:
//  ДлинаСтроки - Число - длина строки.
//
// Возвращаемое значение:
//  ОписаниеТипов - описание типа Строка.
//
Функция ОписаниеТипаСтрока(ДлинаСтроки) Экспорт
	Возврат Новый ОписаниеТипов("Строка", ,КС(ДлинаСтроки));
КонецФункции

// Создает объект ОписаниеТипов, содержащий тип Число.
//
// Параметры:
//  ЧислоРазрядов - Число - общее количество разрядов числа
//    (количество разрядов целой части плюс количество разрядов дробной части).
//  ЧислоРазрядовДробнойЧасти - Число - число разрядов дробной части.
//  ДопустимыйЗнакЧисла - ДопустимыйЗнак - допустимый знак числа.
//
// Возвращаемое значение:
//  ОписаниеТипов - описание типа Число.
//
Функция ОписаниеТипаЧисло(ЧислоРазрядов, ЧислоРазрядовДробнойЧасти = 0, Знач ДопустимыйЗнакЧисла = Неопределено) Экспорт
	
	Если ДопустимыйЗнакЧисла = Неопределено Тогда 
		ДопустимыйЗнакЧисла = ДопустимыйЗнак.Любой;
	КонецЕсли;
	
	Возврат Новый ОписаниеТипов("Число", КЧ(ЧислоРазрядов, ЧислоРазрядовДробнойЧасти, ДопустимыйЗнакЧисла));
	
КонецФункции

// Создает объект ОписаниеТипов, содержащий тип Дата.
//
// Параметры:
//  ЧастиДаты - ЧастиДаты - набор вариантов использования значений типа Дата.
//
// Возвращаемое значение:
//  ОписаниеТипов - описание типа Дата.
//
Функция ОписаниеТипаДата(ЧастиДаты) Экспорт
	Возврат Новый ОписаниеТипов("Дата", , , КД(ЧастиДаты));
КонецФункции

// Создает описание типа, включающего в себя все возможные ссылочные типы конфигурации.
//
// Возвращаемое значение:
//  ОписаниеТипов - все ссылочные типы конфигурации.
//
Функция ОписаниеТипаВсеСсылки() Экспорт
	
	Возврат Новый ОписаниеТипов(Новый ОписаниеТипов(Новый ОписаниеТипов(Новый ОписаниеТипов(Новый ОписаниеТипов(
		Новый ОписаниеТипов(Новый ОписаниеТипов(Новый ОписаниеТипов(Новый ОписаниеТипов(
			Справочники.ТипВсеСсылки(),
			Документы.ТипВсеСсылки().Типы()),
			ПланыОбмена.ТипВсеСсылки().Типы()),
			Перечисления.ТипВсеСсылки().Типы()),
			ПланыВидовХарактеристик.ТипВсеСсылки().Типы()),
			ПланыСчетов.ТипВсеСсылки().Типы()),
			ПланыВидовРасчета.ТипВсеСсылки().Типы()),
			БизнесПроцессы.ТипВсеСсылки().Типы()),
			БизнесПроцессы.ТипВсеСсылкиТочекМаршрутаБизнесПроцессов().Типы()),
			Задачи.ТипВсеСсылки().Типы());
	
КонецФункции

//#КонецЕсли
#КонецОбласти

#Область ВнедренаБСП_ОписаниеТипов
// Если в конфигурации внедрена БСП
// Использовать методы этой области, или же удалить и пользоваться методами модуля ОбщегоНазначения
#Если Не Сервер И Сервер Тогда
      	
// Создает объект ОписаниеТипов, содержащий тип Строка.
//
// Параметры:
//  ДлинаСтроки - Число - длина строки.
//
// Возвращаемое значение:
//  ОписаниеТипов - описание типа Строка.
//
Функция ОписаниеТипаСтрока(ДлинаСтроки) Экспорт
	Возврат ОбщегоНазначения.ОписаниеТипаСтрока(ДлинаСтроки);
КонецФункции

// Создает объект ОписаниеТипов, содержащий тип Число.
//
// Параметры:
//  ЧислоРазрядов - Число - общее количество разрядов числа
//    (количество разрядов целой части плюс количество разрядов дробной части).
//  ЧислоРазрядовДробнойЧасти - Число - число разрядов дробной части.
//  ДопустимыйЗнакЧисла - ДопустимыйЗнак - допустимый знак числа.
//
// Возвращаемое значение:
//  ОписаниеТипов - описание типа Число.
//
Функция ОписаниеТипаЧисло(ЧислоРазрядов, ЧислоРазрядовДробнойЧасти = 0, Знач ДопустимыйЗнакЧисла = Неопределено) Экспорт
	Возврат ОбщегоНазначения.ОписаниеТипаЧисло(ЧислоРазрядов, ЧислоРазрядовДробнойЧасти, ДопустимыйЗнакЧисла);
КонецФункции

// Создает объект ОписаниеТипов, содержащий тип Дата.
//
// Параметры:
//  ЧастиДаты - ЧастиДаты - набор вариантов использования значений типа Дата.
//
// Возвращаемое значение:
//  ОписаниеТипов - описание типа Дата.
//
Функция ОписаниеТипаДата(ЧастиДаты) Экспорт
	Возврат ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты);
КонецФункции

// Создает описание типа, включающего в себя все возможные ссылочные типы конфигурации.
//
// Возвращаемое значение:
//  ОписаниеТипов - все ссылочные типы конфигурации.
//
Функция ОписаниеТипаВсеСсылки() Экспорт
	Возврат ОбщегоНазначения.ОписаниеТипаВсеСсылки();
КонецФункции

#КонецЕсли
#КонецОбласти

// Создает объект ОписаниеТипов, содержащий тип ТаблицаЗначений.
//
// Возвращаемое значение:
//  ОписаниеТипов - описание типа ТаблицаЗначений.
//
Функция ОписаниеТипаТаблицаЗначений() Экспорт
	Возврат Новый ОписаниеТипов(ЗначениеВМассиве(Тип("ТаблицаЗначений")));
КонецФункции

// Создает объект ОписаниеТипов, содержащий тип ДинамическийСписок.
//
// Возвращаемое значение:
//  ОписаниеТипов - описание типа ДинамическийСписок.
//
Функция ОписаниеТипаДинамическийСписок() Экспорт
	Возврат Новый ОписаниеТипов(ЗначениеВМассиве(Тип("ДинамическийСписок")));
КонецФункции

// Создает объект ОписаниеТипов, содержащий тип Булево.
//
// Возвращаемое значение:
//  ОписаниеТипов - описание типа Булево.
//
Функция ОписаниеТипаБулево() Экспорт
	Возврат Новый ОписаниеТипов("Булево");
КонецФункции

// Создает объект ОписаниеТипов, содержащий тип документа по имени
//
// Параметры:
//  Имя - Строка - Имя документа в дереве метаданных
//
// Возвращаемое значение:
//  ОписаниеТипов - описание типа ДокументСсылка.
//
Функция ОписаниеТипаДокумент(Имя) Экспорт
	Возврат Новый ОписаниеТипов("ДокументСсылка." + Имя);
КонецФункции

// Создает объект ОписаниеТипов, содержащий тип справочника по имени
//
// Параметры:
//  Имя - Строка - Имя справочника в дереве метаданных
//
// Возвращаемое значение:
//  ОписаниеТипов - описание типа СправочникСсылка.
//
Функция ОписаниеТипаСправочник(Имя) Экспорт
	Возврат Новый ОписаниеТипов("СправочникСсылка." + Имя);
КонецФункции

// Создает объект ОписаниеТипов, содержащий тип перечисления по имени
//
// Параметры:
//  Имя - Строка - Имя перечисления в дереве метаданных
//
// Возвращаемое значение:
//  ОписаниеТипов - описание типа ПеречислениеСсылка.
//
Функция ОписаниеТипаПеречисление(Имя) Экспорт
	Возврат Новый ОписаниеТипов("ПеречислениеСсылка." + Имя);
КонецФункции

// Создает объект ОписаниеТипов, содержащий типы из объекта метаданных ОпределяемыйТип
//
// Параметры:
//  ИмяОпределяемогоТипа - Строка - Имя объекта метаданных ОпределяемыйТип в дереве метаданных
//
// Возвращаемое значение:
//  ОписаниеТипов - описание составного типа.
//
Функция ОписаниеОпределяемогоТипа(ИмяОпределяемогоТипа) Экспорт
	Возврат Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы[ИмяОпределяемогоТипа].Тип.Типы());
КонецФункции


#Область Квалификаторы
// Сокращённый вызов конструкторов квалификаторов типов

// Создает объект КвалификаторСтроки
//
// Параметры:
//  ДлинаСтроки - Число - длина строки
//  ДопустимаяДлинаСтроки - ДлинаСтроки - указывается вариант ограничения длины строки (для длины строки отличной от 0)
//
// Возвращаемое значение:
//  КвалификаторыСтроки - квалификатор строки
//
Функция КС(ДлинаСтроки = 0, ДопустимаяДлинаСтроки = Неопределено) Экспорт
	Если ДопустимаяДлинаСтроки = Неопределено Тогда
		ДопустимаяДлинаСтроки = ДопустимаяДлина.Переменная;
	КонецЕсли;
	Возврат Новый КвалификаторыСтроки(ДлинаСтроки, ДопустимаяДлинаСтроки);
КонецФункции

// Создает объект КвалификаторЧисла
//
// Параметры:
//  ЧислоРазрядов - Число - общая длина числа
//  ЧислоРазрядовДробнойЧасти - Число - количество символов после запятой
//  ДопустимыйЗнакЧисла - ДопустимыйЗнак - допустимый знак числа.
//
// Возвращаемое значение:
//  КвалификаторыЧисла - квалификатор числа
//
Функция КЧ(ЧислоРазрядов = 15, ЧислоРазрядовДробнойЧасти = 2, ДопустимыйЗнакЧисла = Неопределено) Экспорт
	Если ДопустимыйЗнакЧисла = Неопределено Тогда 
		ДопустимыйЗнакЧисла = ДопустимыйЗнак.Любой;
	КонецЕсли;
	Возврат Новый КвалификаторыЧисла(ЧислоРазрядов, ЧислоРазрядовДробнойЧасти, ДопустимыйЗнакЧисла);
КонецФункции

// Создает объект КвалификаторДаты
//
// Параметры:
//  ДатаВремя - ЧастиДаты - Допустимые части даты
//
// Возвращаемое значение:
//  КвалификаторыДаты - квалификатор даты
//
Функция КД(ЧастиДаты) Экспорт
	Возврат Новый КвалификаторыДаты(ЧастиДаты);
КонецФункции

#КонецОбласти

#КонецОбласти

#Область РаботаСРеквизитамиФормы

// Добавляет реквизит формы.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма.
//  Имя - Строка - Имя реквизита.
//  Тип - Строка, Тип, ОписаниеТипов - Тип реквизита.
// 
// Возвращаемое значение:
//  РеквизитФормы - описание созданного реквизита формы.
//
Функция ДобавитьРеквизит(Форма, Имя, Тип, Путь = Неопределено) Экспорт
	
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыйРеквизит = ДобавляемыеРеквизитыДобавить(ДобавляемыеРеквизиты, Имя, Тип, Путь);
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	Возврат ДобавляемыйРеквизит;
	
КонецФункции

// Добавляет в добавляемые реквизиты таблицу.
//
// Параметры:
//  ДобавляемыеРеквизиты - Массив - Добавляемые реквизиты.
//  Имя - Строка - Имя реквизита.
//  Колонки - Массив - массив структур описания колонок добавляемой таблицы.
// 
// Возвращаемое значение:
//  РеквизитФормы - описание созданного реквизита формы.
//
Функция ДобавляемыеРеквизитыДобавитьТаблицу(ДобавляемыеРеквизиты, Имя, Колонки) Экспорт
	
	ДобавляемыйРеквизит = ДобавляемыеРеквизитыДобавить(ДобавляемыеРеквизиты, Имя, "ТаблицаЗначений");
	Для Каждого Колонка Из Колонки Цикл
		ДобавляемыеРеквизитыДобавить(ДобавляемыеРеквизиты, Колонка.Имя, Колонка.Тип, Имя);
	КонецЦикла;
	
	Возврат ДобавляемыйРеквизит;
	
КонецФункции

// Добавляет в добавляемые реквизиты.
//
// Параметры:
//  ДобавляемыеРеквизиты - Массив - Добавляемые реквизиты.
//  Имя - Строка - Имя реквизита.
//  Тип - Строка, Тип, ОписаниеТипов - Тип реквизита.
//  Путь - Строка - Путь реквизита.
// 
// Возвращаемое значение:
//  РеквизитФормы - описание созданного реквизита формы.
//
Функция ДобавляемыеРеквизитыДобавить(ДобавляемыеРеквизиты, Имя, Тип, Путь = Неопределено) Экспорт
	
	Если ТипЗнч(Тип) = Тип("Строка") Тогда
		ТипДобавляемогоРеквизита = Новый ОписаниеТипов(Тип);
	ИначеЕсли ТипЗнч(Тип) = Тип("Тип") Тогда
		Типы = ЗначениеВМассиве(Тип);
		ТипДобавляемогоРеквизита = Новый ОписаниеТипов(Типы);
	ИначеЕсли ТипЗнч(Тип) = Тип("ОписаниеТипов") Тогда
		ТипДобавляемогоРеквизита = Тип;
	КонецЕсли;
	ДобавляемыйРеквизит = Новый РеквизитФормы(Имя, ТипДобавляемогоРеквизита, Путь);
	ДобавляемыеРеквизиты.Добавить(ДобавляемыйРеквизит);
	
	Возврат ДобавляемыйРеквизит;
	
КонецФункции

// Проверяет, существует ли реквизит формы.
Функция РеквизитСуществует(Форма, Имя) Экспорт
	
	РеквизитСуществует = Ложь;
	
	Реквизиты = Форма.ПолучитьРеквизиты();
	Для Каждого Реквизит Из Реквизиты Цикл
		Если Реквизит.Имя = Имя Тогда
			РеквизитСуществует = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат РеквизитСуществует;
	
КонецФункции

// Удаляет реквизиты
// Только для созданных программно
//
//Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма.
//	МассивУдаляемыхРеквизитов - Массив - Именама удаляемых реквизитов
//
Процедура УдалитьРеквизиты(Форма, МассивУдаляемыхРеквизитов) Экспорт
	
	Форма.ИзменитьРеквизиты( , МассивУдаляемыхРеквизитов);
	
КонецПроцедуры

// Удаляет реквизит
// Только для созданных программно
//
//Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма.
//	ИмяРеквизита - Строка - Имя удаляемого реквизита
//
Процедура УдалитьРеквизит(Форма, Имя) Экспорт
	
	МассивУдаляемыхРеквизитов = ЗначениеВМассиве(Имя);
	УдалитьРеквизиты(Форма, МассивУдаляемыхРеквизитов);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСКомандами

// Добавляет команду формы.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма.
//  Имя - Строка - Уникальное имя добавляемой команды.
//  Заголовок - Строка - Заголовок добавляемой команды.
//  ИмяДействия - Строка - Имя процедуры-обработчика команды. Например: Процедура ИмяДействия(Команда)
//  Картинка - Картинка, Неопределено - Картинка добавляемой команды.
// 
// Возвращаемое значение:
//  КомандыФормы - Команда формы.
//
Функция ДобавитьКоманду(Форма, Имя, Заголовок, ИмяДействия, Картинка = Неопределено) Экспорт
	
	СозданнаяКоманда = Форма.Команды.Добавить(Имя);
	СозданнаяКоманда.Действие = ИмяДействия;
	СозданнаяКоманда.Заголовок = Заголовок;
	Если Картинка <> Неопределено Тогда
		СозданнаяКоманда.Картинка = Картинка;
		СозданнаяКоманда.Отображение = ОтображениеКнопки.КартинкаИТекст;
	КонецЕсли;
	
	Возврат СозданнаяКоманда;
	
КонецФункции

// Удаляет команду
// Только для  созданных программно.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма.
//	Имя - Строка - Имя улаляемой команды.
//
Процедура УдалитьКоманду(Форма, Имя) Экспорт
	
	Команда = Форма.Команды.Найти(Имя);
	
	Если Команда = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма.Команды.Удалить(Команда);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСЭлементамиФормы

Функция ДобавитьЭлементФормы(Форма, ИмяЭлемента, ТипЭлемента, Родитель, ВставитьПеред = Неопределено)
	
	Если ВставитьПеред = Неопределено Тогда
		НовыйЭлемент = Форма.Элементы.Добавить(ИмяЭлемента, ТипЭлемента, Родитель);
	Иначе
		НовыйЭлемент = Форма.Элементы.Вставить(ИмяЭлемента, ТипЭлемента, Родитель, ВставитьПеред);
	КонецЕсли;
	
	Возврат НовыйЭлемент;
	
КонецФункции


#Область ГруппыФормы

// Добавляет группу
//	Простое добавление элемента для дальнейшей модификации
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма.
//	Имя - Строка - Уникальное имя добавляемого элемента.
//	Родитель - Строка, ЭлементФормы - Имя элемента или элемент формы.
//	ВставитьПеред	- Строка, ЭлементФормы - Элемент, перед которым требуется вставить новый элемент. Имя элемента или элемент формы.
// 
// Возвращаемое значение:
//  ГруппаФормы - Добавленная группа формы.
//
Функция ДобавитьГруппу(
		Форма,
		Имя,
		Родитель = Неопределено,
		ВставитьПеред = Неопределено) Экспорт
	
	ЭлементРодитель = НайтиЭлементФормы(Форма, Родитель);
	ЭлементВставитьПеред = НайтиЭлементФормы(Форма, ВставитьПеред);
	
	НовыйЭлемент = ДобавитьЭлементФормы(
		Форма,
		Имя,
		Тип("ГруппаФормы"),
		ЭлементРодитель,
		ЭлементВставитьПеред);

	Возврат НовыйЭлемент;
	
КонецФункции
		
// Добавляет обычную группу
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма.
//	Имя - Строка - Уникальное имя добавляемого элемента.
//	Заголовок - Строка, Неопределено - Заголовок группы. Если заголовок не указан, то создаётся группа без отображения.
//	Родитель - Строка, ЭлементФормы - Имя элемента или элемент формы.
//	ВставитьПеред	- Строка, ЭлементФормы - Элемент, перед которым требуется вставить новый элемент. Имя элемента или элемент формы.
//	ГруппировкаОбычнойГруппы - ГруппировкаПодчиненныхЭлементовФормы, Неопределено -
//		Принимаемые значения:
//			* Неопределено - Авто
//			* Вертикальная
//			* ГоризонтальнаяЕслиВозможно
//			* ГоризонтальнаяВсегда
//	РастягиватьПоГоризонтали - Булево, Неопределено -
//			* Неопределено - Авто
//	РастягиватьПоВертикали - Булево, Неопределено -
//			* Неопределено - Авто
//	СтруктураСвойств - Структура - Содержит значения свойств, где ключ имя свойства.
// 
// Возвращаемое значение:
//  ГруппаФормы - Добавленная группа формы.
//
Функция ДобавитьОбычнуюГруппу(
		Форма,
		Имя,
		Заголовок = Неопределено,
		Родитель = Неопределено,
		ВставитьПеред = Неопределено,
		ГруппировкаОбычнойГруппы = Неопределено,
		РастягиватьПоГоризонтали = Неопределено,
		РастягиватьПоВертикали = Неопределено,
		СтруктураСвойств = Неопределено
		) Экспорт
	
	НовыйЭлемент = ДобавитьГруппу(Форма, Имя, Родитель, ВставитьПеред);
	НовыйЭлемент.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	НовыйЭлемент.Заголовок = Заголовок;
	Если Заголовок = Неопределено Тогда
		НовыйЭлемент.Отображение = ОтображениеОбычнойГруппы.Нет;
		НовыйЭлемент.ОтображатьЗаголовок = Ложь;
	КонецЕсли; 
	
	Если Не ГруппировкаОбычнойГруппы = Неопределено Тогда
		НовыйЭлемент.Группировка = ГруппировкаОбычнойГруппы;
	КонецЕсли;
	НовыйЭлемент.РастягиватьПоГоризонтали = РастягиватьПоГоризонтали;
	НовыйЭлемент.РастягиватьПоВертикали = РастягиватьПоВертикали;

	УстановитьСвойстваЭлементу(НовыйЭлемент, СтруктураСвойств);
	
	Возврат НовыйЭлемент;
	
КонецФункции

// Добавляет страницы формы.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма.
//	Имя - Строка - Уникальное имя добавляемого элемента.
//	Родитель - Строка, ЭлементФормы - Имя элемента или элемент формы.
//	ВставитьПеред	- Строка, ЭлементФормы - Элемент, перед которым требуется вставить новый элемент. Имя элемента или элемент формы.
//	РастягиватьПоГоризонтали - Булево, Неопределено -
//		Принимаемые значения:
//			* Неопределено - Авто
//	РастягиватьПоВертикали - Булево, Неопределено - Принимаемые значения:
//					* Неопределено - Авто
//	ОбработчикПриСменеСтраницы - Строка - При смене страницы???
//	СтруктураСвойств - Структура - Содержит значения свойств, где ключ имя свойства.
// 
// Возвращаемое значение:
//  ГруппаФормы - Страницы формы.
//
Функция ДобавитьСтраницы(
		Форма,
		Имя,
		Родитель = Неопределено,
		ВставитьПеред = Неопределено,
		РастягиватьПоГоризонтали = Неопределено,
		РастягиватьПоВертикали = Неопределено,
		СтруктураСвойств = Неопределено
		) Экспорт
	
	ЭлементРодитель = НайтиЭлементФормы(Форма, Родитель);
	ЭлементВставитьПеред = НайтиЭлементФормы(Форма, ВставитьПеред);
	
	НовыйЭлемент = ДобавитьЭлементФормы(
		Форма,
		Имя,
		Тип("ГруппаФормы"),
		ЭлементРодитель,
		ЭлементВставитьПеред);
	НовыйЭлемент.Вид = ВидГруппыФормы.Страницы;
	НовыйЭлемент.РастягиватьПоГоризонтали = РастягиватьПоГоризонтали;
	НовыйЭлемент.РастягиватьПоВертикали = РастягиватьПоВертикали;
	
	УстановитьСвойстваЭлементу(НовыйЭлемент, СтруктураСвойств);
	
	Возврат НовыйЭлемент;
	
КонецФункции

// Добавляет страницу формы.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма.
//	Имя - Строка - Уникальное имя добавляемого элемента.
//	ГруппаСтраницы -  Строка, ЭлементФормы - Имя элемента или элемент формы.
//	Заголовок - Строка, Неопределено - Заголовок страницы
//	ВставитьПеред	- Строка, ЭлементФормы - Элемент, перед которым требуется вставить новый элемент. Имя элемента или элемент формы.
//	ГруппировкаОбычнойГруппы - ГруппировкаПодчиненныхЭлементовФормы, Неопределено -
//		Принимаемые значения:
//			* Вертикальная
//			* ГоризонтальнаяЕслиВозможно
//			* ГоризонтальнаяВсегда
//			* Неопределено - Авто
//	РастягиватьПоГоризонтали - Булево, Неопределено - Принимаемые значения:
//			* Неопределено - Авто
//	РастягиватьПоВертикали - Булево, Неопределено - Принимаемые значения:
//			* Неопределено - Авто
//	СтруктураСвойств - Структура - Содержит значения свойств, где ключ имя свойства.
// 
// Возвращаемое значение:
//  ГруппаФормы - Страница формы.
//
Функция ДобавитьСтраницу(
		Форма,
		Имя,
		ГруппаСтраницы,
		Заголовок = Неопределено,
		ВставитьПеред = Неопределено,		
		ГруппировкаОбычнойГруппы = Неопределено,
		РастягиватьПоГоризонтали = Неопределено,
		РастягиватьПоВертикали = Неопределено,
		СтруктураСвойств = Неопределено
		) Экспорт
	
	ЭлементРодитель = НайтиЭлементФормы(Форма, ГруппаСтраницы);
	ЭлементВставитьПеред = НайтиЭлементФормы(Форма, ВставитьПеред);
	
	НовыйЭлемент = ДобавитьЭлементФормы(
		Форма,
		Имя,
		Тип("ГруппаФормы"),
		ЭлементРодитель,
		ЭлементВставитьПеред);
		
	НовыйЭлемент.Вид = ВидГруппыФормы.Страница;
	Если Не ГруппировкаОбычнойГруппы = Неопределено Тогда
		НовыйЭлемент.Группировка = ГруппировкаОбычнойГруппы;
	КонецЕсли;
	НовыйЭлемент.РастягиватьПоГоризонтали = РастягиватьПоГоризонтали;
	НовыйЭлемент.РастягиватьПоВертикали = РастягиватьПоВертикали;
	
	Если Не Заголовок = Неопределено Тогда
		НовыйЭлемент.Заголовок = Заголовок;
	КонецЕсли;
	
	УстановитьСвойстваЭлементу(НовыйЭлемент, СтруктураСвойств);
	
	Возврат НовыйЭлемент;
	
КонецФункции

// Добавляет командную панель
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма.
//	Имя - Строка - Уникальное имя добавляемого элемента.
//	Родитель - Строка, ЭлементФормы - Имя элемента или элемент формы.
//	ВставитьПеред	- Строка, ЭлементФормы - Элемент, перед которым требуется вставить новый элемент. Имя элемента или элемент формы.
//	СтруктураСвойств - Структура - Содержит значения свойств, где ключ имя свойства.
// 
// Возвращаемое значение:
//  ГруппаФормы - командная панель.
//
Функция ДобавитьКоманднуюПанель(
		Форма,
		Имя,
		Родитель,
		ВставитьПеред = Неопределено,
		СтруктураСвойств = Неопределено
		) Экспорт
	
	НовыйЭлемент = ДобавитьГруппу(Форма,Имя, Родитель, ВставитьПеред);
	НовыйЭлемент.Вид = ВидГруппыФормы.КоманднаяПанель;
	
	УстановитьСвойстваЭлементу(НовыйЭлемент, СтруктураСвойств);
	
	Возврат НовыйЭлемент;
	
КонецФункции

#КонецОбласти


#Область ПоляФормы
 
// Добавляет поле формы
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма.
//	Имя - Строка - Уникальное имя добавляемого элемента.
//	Родитель - Строка, ЭлементФормы - Имя элемента или элемент формы.
//	ВставитьПеред	- Строка, ЭлементФормы - Элемент, перед которым требуется вставить новый элемент. Имя элемента или элемент формы.
//	Заголовок - Строка, Неопределено - Заголовок элемента. Скрыт, если передано значение Неопределено.
//	ВидПоля - ВидПоляФормы, Неопределено - Вид поля формы
//	ПутьКДанным		- Строка - Путь к данным значения
//	СтруктураСвойств - Структура -
//		Содержит значения свойств, где:
//			* Ключ - имя свойства,
//			* Значение - устанавливаемое значение свойства.
//	СтруктураСобытий - Структура - 
//		Содержит значения событий, где:
//			* Ключ - имя события,
//			* Значение - имя процедуры обработчика.
// 
// Возвращаемое значение:
//  ПолеФормы - Добавленное поле формы.
//
Функция ДобавитьПоле(
		Форма,
		Имя,
		Родитель,
		ВставитьПеред = Неопределено,
		Заголовок = "",
		ВидПоля = Неопределено,
		ПутьКДанным = "",
		СтруктураСвойств = Неопределено,
		СтруктураСобытий = Неопределено
		) Экспорт
	
	ЭлементРодитель = НайтиЭлементФормы(Форма, Родитель);
	ЭлементВставитьПеред = НайтиЭлементФормы(Форма, ВставитьПеред);
	
	НовыйЭлемент = ДобавитьЭлементФормы(
		Форма,
		Имя,
		Тип("ПолеФормы"),
		ЭлементРодитель,
		ЭлементВставитьПеред);
	
	НовыйЭлемент.Вид = ВидПоля;
	
	НовыйЭлемент.Заголовок = Заголовок;
	Если Заголовок = Неопределено Тогда
		НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	КонецЕсли;
	
	Если Не ПустаяСтрока(ПутьКДанным) Тогда
		НовыйЭлемент.ПутьКДанным = ПутьКДанным;
	КонецЕсли;
	
	УстановитьСвойстваЭлементу(НовыйЭлемент, СтруктураСвойств);
	УстановитьСобытияЭлементу(НовыйЭлемент, СтруктураСобытий);
	
	Возврат НовыйЭлемент;
	
КонецФункции

// Добавляет поле флажка
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма.
//	Имя - Строка - Уникальное имя добавляемого элемента.
//	Родитель	- Строка, ЭлементФормы - Имя элемента или Элемент формы
//	ВставитьПеред	- Строка, ЭлементФормы - Элемент, перед которым требуется вставить новый элемент. Имя элемента или элемент формы.
//	Заголовок - Строка, Неопределено - Заголовок элемента.
//	ВидФлажка - ВидФлажка, Неопределено -
//		Возможные варианты:
//			* Неопределено - Авто
//			* Флажок
//			* Тубмлер
//			* Выключатель
//	ПутьКДанным - Строка - Путь к реквизиту формы.
//	СтруктураСвойств - Структура - см. параметры метода ДобавитьПоле.
//	СтруктураСобытий - Структура - см. параметры метода ДобавитьПоле.
// 
// Возвращаемое значение:
//  ПолеФормы - Добавленное поле формы.
//
Функция ДобавитьПолеФлажка(
		Форма,
		Имя,
		Родитель,
		ВставитьПеред = Неопределено,
		Заголовок = "",
		ВидФлажкаЭлемента = Неопределено,
		ПутьКДанным = "",
		СтруктураСвойств = Неопределено,
		СтруктураСобытий = Неопределено
		) Экспорт
	
	НовыйЭлемент = ДобавитьПоле(
		Форма,
		Имя,
		Родитель,
		ВставитьПеред,
		Заголовок,
		ВидПоляФормы.ПолеФлажка,
		ПутьКДанным,
		СтруктураСвойств,
		СтруктураСобытий);
		
	НовыйЭлемент.ВидФлажка = ?(ВидФлажкаЭлемента = Неопределено, ВидФлажка.Авто, ВидФлажкаЭлемента);
	
	Возврат НовыйЭлемент;
	
КонецФункции

// Добавляет поле надписи формы.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма.
//	Имя - Строка - Уникальное имя добавляемого элемента.
//	Родитель	- Строка, ЭлементФормы - Имя элемента или Элемент формы
//	ВставитьПеред	- Строка, ЭлементФормы - Элемент, перед которым требуется вставить новый элемент. Имя элемента или элемент формы.
//	Заголовок - Строка, Неопределено - Заголовок элемента.
//	ПутьКДанным - Строка - Путь к реквизиту формы.
//	СтруктураСвойств - Структура - см. параметры метода ДобавитьПоле.
//	СтруктураСобытий - Структура - см. параметры метода ДобавитьПоле.
// 
// Возвращаемое значение:
//  ПолеФормы - Добавленное поле формы.
//
Функция ДобавитьПолеНадписи(
		Форма,
		Имя,
		Родитель,
		ВставитьПеред = Неопределено,
		Заголовок = "",
		ПутьКДанным = "",
		СтруктураСвойств = Неопределено,
		СтруктураСобытий = Неопределено
		) Экспорт
	
	НовыйЭлемент = ДобавитьПоле(
		Форма,
		Имя,
		Родитель,
		ВставитьПеред,
		Заголовок,
		ВидПоляФормы.ПолеНадписи,
		ПутьКДанным,
		СтруктураСвойств,
		СтруктураСобытий);
		
	Возврат НовыйЭлемент;
	
КонецФункции

// Добавляет поле ввода формы.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма.
//	Имя - Строка - Уникальное имя добавляемого элемента.
//	Родитель - ГруппаФормы, ТаблицаФормы, ФормаКлиентскогоПриложения - Родитель для добавляемого элемента.
//	Заголовок		- Строка, Неопределено - Заголовок элемента.
//	ПутьКДанным - Строка - Путь к реквизиту формы.
//	СтруктураСвойств - Структура - Содержит значения свойств, где ключ имя свойства.
//	СтруктураСобытий - Структура - Содержит значения событий, где ключ имя события и в значение название процедуры тип "строка"
//	ВставитьПеред	- Строка, ЭлементФормы - Элемент, перед которым требуется вставить новый элемент. Имя элемента или элемент формы.
// 
// Возвращаемое значение:
//  ПолеФормы - Добавленное поле формы.
//
Функция ДобавитьПолеВвода(
		Форма,
		Имя,
		Родитель,
		Заголовок = "",
		ПутьКДанным = "",
		СтруктураСвойств = Неопределено,
		СтруктураСобытий = Неопределено,
		ВставитьПеред = Неопределено) Экспорт
	
	НовыйЭлемент = ДобавитьПоле(
		Форма,
		Имя,
		Родитель,
		ВставитьПеред,
		Заголовок,
		ВидПоляФормы.ПолеВвода,
		ПутьКДанным,
		СтруктураСвойств,
		СтруктураСобытий);
	
	
	Возврат НовыйЭлемент;
	
КонецФункции

// Добавляет поле картинки формы.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма.
//  Имя - Строка - Уникальное имя добавляемого элемента.
//  Родитель - ГруппаФормы, ТаблицаФормы, ФормаКлиентскогоПриложения - Родитель для добавляемого элемента.
//  ПутьКДанным - Строка - Путь к реквизиту формы.
//  СтруктураСвойств - Структура - Содержит значения свойств, где ключ имя свойства.
//  СтруктураСобытий - Структура - Содержит значения событий, где ключ имя события и в значение название процедуры тип "строка"
//  ВставитьПеред	- Строка, ЭлементФормы - Элемент, перед которым требуется вставить новый элемент. Имя элемента или элемент формы.
// 
// Возвращаемое значение:
//  ПолеФормы - Поле картинки формы.
//
Функция ДобавитьПолеКартинки(
		Форма,
		Имя,
		Родитель,
		ПутьКДанным,
		ВставитьПеред = Неопределено,
		СтруктураСвойств = Неопределено,
		СтруктураСобытий = Неопределено
		) Экспорт
	
	НовыйЭлемент = ДобавитьПоле(
		Форма,
		Имя,
		Родитель,
		ВставитьПеред,
		,
		ВидПоляФормы.ПолеКартинки,
		ПутьКДанным,
		СтруктураСвойств,
		СтруктураСобытий);
		
	НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	НовыйЭлемент.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки, 1);
	НовыйЭлемент.РастягиватьПоГоризонтали = Ложь;
	НовыйЭлемент.РастягиватьПоВертикали = Ложь;
	НовыйЭлемент.РазмерКартинки = РазмерКартинки.АвтоРазмер;
		
		
	Возврат НовыйЭлемент;
	
КонецФункции

#КонецОбласти


#Область ЭлементыСРеквизитами

// Добавляет выпадающий список.
//	Создается автоматически строковый реквизит с идентичным названием
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма.
//	Имя - Строка - Имя элемента на форме
//	Родитель	- Строка, ЭлементФормы - Имя элемента или элемент формы.
//	Заголовок - Строка - Отображаемый заголовок
//	МассивЗначений - Массив - массив значений выбора из списка (содержит строковый тип)
//	РеквизитДлинаСтроки - Число - Длина строки для типа, устанавливаемого для связанного реквизита формы
//	РедактированиеТекста - Булево - Редактирование текста, если Ложь, то можно выбирать только из списка
//	ВставитьПеред	- Строка, ЭлементФормы - Элемент, перед которым требуется вставить новый элемент. Имя элемента или элемент формы.
//	СтруктураСвойств - Структура - Содержит значения свойств, где ключ имя свойства.
//	СтруктураСобытий - Структура - Содержит значения событий, где ключ имя события и в значение название процедуры тип "строка"
// 
// Возвращаемое значение:
//  ПолеФормы - Добавленный элемент формы.
//
Функция ДобавитьВыпадающийСписок(
		Форма,
		Имя,
		Родитель,
		Заголовок = Неопределено,
		ТипЗначения,
		МассивЗначений = Неопределено,
		РедактированиеТекста = Ложь,
		ВставитьПеред = Неопределено,
		СтруктураСвойств = Неопределено,
		СтруктураСобытий = Неопределено
		) Экспорт
	
	ДобавитьРеквизит(Форма, Имя, ТипЗначения);

	НовыйЭлемент = ДобавитьПоле(
		Форма,
		Имя,
		Родитель,
		ВставитьПеред,
		Заголовок,
		ВидПоляФормы.ПолеВвода,
		Имя,
		СтруктураСвойств,
		СтруктураСобытий);
		
	НовыйЭлемент.КнопкаВыпадающегоСписка = Истина;
	НовыйЭлемент.РедактированиеТекста = РедактированиеТекста;
	
	Если Не МассивЗначений = Неопределено Тогда
		НовыйЭлемент.СписокВыбора.ЗагрузитьЗначения(МассивЗначений);
	КонецЕсли;
	
	Возврат НовыйЭлемент;
	
КонецФункции

// Добавляет переключатель
//	Создается автоматически реквизит формы с идентичным именем.
//		В случае передачи значений выбора несовместимого типа будет вызвано исключение.
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма.
//	Имя - Строка - Имя элемента на форме
//	Родитель	- Строка, ЭлементФормы - Имя элемента, или элемент формы
//	МассивЗначений - Массив - Массив значений выбора из списка.
//					Должен содержать значения поддерживаемые полем переключателя: Число, Строка, Перечисление, Справочник, План<...>
//	Заголовок - Строка - Отображаемый заголовок
//	ВидПереключателя - ВидПереключателя - Принимает значения:
//					* Неопределено - Авто
//					* Переключатель
//					* Тумблер
//	ВставитьПеред	- Строка, ЭлементФормы - Элемент, перед которым требуется вставить новый элемент. Имя элемента или элемент формы.
//	СтруктураСвойств - Структура - Содержит значения свойств, где ключ имя свойства.
//	СтруктураСобытий - Структура - Содержит значения событий, где ключ имя события и в значение название процедуры тип "строка"
// 
// Возвращаемое значение:
//  ПолеФормы - Добавленный элемент формы.
//
Функция ДобавитьПереключатель(
		Форма,
		Имя,
		Родитель,
		МассивЗначений,
		Заголовок = Неопределено,
		ВидПереключателя = Неопределено,
		ВставитьПеред = Неопределено,
		СтруктураСвойств = Неопределено,
		СтруктураСобытий = Неопределено
		) Экспорт
	
	ДобавитьРеквизит(Форма, Имя, ТипЗнч(МассивЗначений[0]));

	НовыйЭлемент = ДобавитьПоле(
		Форма,
		Имя,
		Родитель,
		ВставитьПеред,
		Заголовок,
		ВидПоляФормы.ПолеПереключателя,
		Имя,
		СтруктураСвойств,
		СтруктураСобытий);
	
	Если Не ВидПереключателя = Неопределено Тогда
		НовыйЭлемент.ВидПереключателя = ВидПереключателя;
	КонецЕсли;
	
	// В случае несовместимого типа значений, будет выдано исключение несоответствия типов
	НовыйЭлемент.СписокВыбора.ЗагрузитьЗначения(МассивЗначений);
	
	Возврат НовыйЭлемент;
	
КонецФункции

#КонецОбласти


#Область ДекорацииФормы

// Добавляет надпись формы.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма.
//	Имя - Строка - Уникальное имя добавляемого элемента.
//	Родитель	- Строка, ЭлементФормы - Имя элемента или элемент формы.
//	Заголовок - Строка - Заголовок добавляемой декорации.
//	РастягиватьПоГоризонтали - Булево - Растянуть надпись на всю ширину формы.
//	ВставитьПеред	- Строка, ЭлементФормы - Элемент, перед которым требуется вставить новый элемент. Имя элемента или элемент формы.
// 
// Возвращаемое значение:
//  ДекорацияФормы - Надпись формы.
//
Функция ДобавитьНадпись(
		Форма,
		Имя,
		Родитель,
		Заголовок,
		РастягиватьПоГоризонтали = Истина,
		ВставитьПеред = Неопределено) Экспорт
	
	НовыйЭлемент = ДобавитьДекорацию(
		Форма,
		Имя,
		Родитель,
		ВставитьПеред);
		
	НовыйЭлемент.Вид = ВидДекорацииФормы.Надпись;
	НовыйЭлемент.Заголовок = Заголовок;
	НовыйЭлемент.РастягиватьПоГоризонтали = РастягиватьПоГоризонтали;
	
	Если РастягиватьПоГоризонтали Тогда
		НовыйЭлемент.АвтоМаксимальнаяШирина = Ложь;
	КонецЕсли;
	
	Возврат НовыйЭлемент;
	
КонецФункции

// Добавляет декорацию картинку
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма.
//	Имя - Строка - Уникальное имя добавляемого элемента.
//	Родитель	- Строка, ЭлементФормы - Имя элемента или элемент формы.
//	Картинка - Строка, Картинка - Имя картинки в дереве метаданных или Картинка
//	ВставитьПеред	- Строка, ЭлементФормы - Элемент, перед которым требуется вставить новый элемент. Имя элемента или элемент формы.
// 
// Возвращаемое значение:
//  ДекорацияФормы - Картинка формы.
//
Функция ДобавитьКартинку(
		Форма,
		Имя,
		Родитель,
		Картинка,
		ВставитьПеред = Неопределено) Экспорт
	
	НовыйЭлемент = ДобавитьДекорацию(
		Форма,
		Имя,
		Родитель,
		ВставитьПеред);
	
	НовыйЭлемент.Вид = ВидДекорацииФормы.Картинка;
	НовыйЭлемент.Картинка = ?(ТипЗнч(Картинка)  = Тип("Строка"), БиблиотекаКартинок.Найти(Картинка), Картинка);
	
	Возврат НовыйЭлемент;
	
КонецФункции

// Добавляет декорацию
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма.
//	Имя - Строка - Уникальное имя добавляемого элемента.
//	Родитель - Строка, ЭлементФормы - Имя элемента или элемент формы.
//	ВставитьПеред	- Строка, ЭлементФормы - Элемент, перед которым требуется вставить новый элемент. Имя элемента или элемент формы.
//	СтруктураСвойств - Структура - см. параметры метода ДобавитьПоле.
//	СтруктураСобытий - Структура - см. параметры метода ДобавитьПоле.
// 
// Возвращаемое значение:
//  ДекорацияФормы - Добавленная декорация формы.
//
Функция ДобавитьДекорацию(
		Форма,
		Имя,
		Родитель,
		ВставитьПеред = Неопределено,
		СтруктураСвойств = Неопределено,
		СтруктураСобытий = Неопределено) Экспорт
	
	ЭлементРодитель = НайтиЭлементФормы(Форма, Родитель);
	ЭлементВставитьПеред = НайтиЭлементФормы(Форма, ВставитьПеред);
	
	НовыйЭлемент = ДобавитьЭлементФормы(
		Форма,
		Имя,
		Тип("ДекорацияФормы"),
		ЭлементРодитель,
		ЭлементВставитьПеред);
	
	УстановитьСвойстваЭлементу(НовыйЭлемент, СтруктураСвойств);
	УстановитьСобытияЭлементу(НовыйЭлемент, СтруктураСобытий);
	
	Возврат НовыйЭлемент;
	
КонецФункции

// Добавляет отступ формы.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма.
//  Имя - Строка - Уникальное имя добавляемого элемента.
//  Родитель - ГруппаФормы, ТаблицаФормы, ФормаКлиентскогоПриложения - Родитель для добавляемого элемента.
// 
// Возвращаемое значение:
//  ДекорацияФормы - Отступ формы.
//
Функция ДобавитьОтступ(
		Форма,
		Имя,
		Родитель,
		Высота = 1,
		Ширина = 1) Экспорт
	
	НовыйЭлемент = ДобавитьНадпись(Форма, Имя, Родитель, "");
	НовыйЭлемент.РастягиватьПоГоризонтали = Ложь;
	НовыйЭлемент.РастягиватьПоВертикали = Ложь;
	НовыйЭлемент.Высота = Высота;
	НовыйЭлемент.Ширина = Ширина;
	НовыйЭлемент.АвтоМаксимальнаяШирина = Ложь;
	НовыйЭлемент.АвтоМаксимальнаяВысота= Ложь;
	НовыйЭлемент.МаксимальнаяШирина = 0;
	НовыйЭлемент.МаксимальнаяВысота = 0;
	
	Возврат НовыйЭлемент;
	
КонецФункции

#КонецОбласти
 

#Область КнопкиФормы

// Добавляет кнопку
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма.
//	Имя - Строка - Уникальное имя добавляемого элемента.
//	Родитель	- Строка, ЭлементФормы - Имя элемента или элемент формы.
//	Заголовок - Строка - Отображаемый заголовок
//	ИмяКоманды - Строка - Имя команды
//	ВидКнопки - ВидКнопкиФормы - Принимаемые значения:
//					* Обычная кнопка
//					* Гиперссылка
//	ВставитьПеред	- Строка, ЭлементФормы - Элемент, перед которым требуется вставить новый элемент. Имя элемента или элемент формы.
//	СтруктураСвойств - Структура - см. параметры метода ДобавитьПоле.
// 
// Возвращаемое значение:
//  КнопкаФормы - Добавленная кнопка формы.
//
Функция ДобавитьКнопку(
		Форма,
		Имя,
		Родитель,
		Заголовок = "",
		ИмяКоманды = "",
		ВидКнопки = Неопределено,
		ВставитьПеред = Неопределено,
		СтруктураСвойств = Неопределено
		) Экспорт
	
	ЭлементРодитель = НайтиЭлементФормы(Форма, Родитель);
	ЭлементВставитьПеред = НайтиЭлементФормы(Форма, ВставитьПеред);
	
	НовыйЭлемент = ДобавитьЭлементФормы(
		Форма,
		Имя,
		Тип("КнопкаФормы"),
		ЭлементРодитель,
		ЭлементВставитьПеред);

	НовыйЭлемент.Заголовок = Заголовок;
	НовыйЭлемент.ИмяКоманды = ИмяКоманды;
	Если Не ВидКнопки = Неопределено Тогда
		НовыйЭлемент.Вид = ВидКнопки;
	КонецЕсли;

	УстановитьСвойстваЭлементу(НовыйЭлемент, СтруктураСвойств);
	
	Возврат НовыйЭлемент;
	
КонецФункции

#КонецОбласти


#Область РаботаСТаблицамиФормы

// Добавляет динамический список
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма.
//	Имя - Строка - Уникальное имя добавляемого элемента.
//	Родитель	- Строка, ЭлементФормы - Имя элемента или элемент формы.
//	СтруктураКолонок 	- Структура, Неопределено -
//			* Ключ - имя колонки,
//			* Значение - заголовок колонки.
//			Для сложных случаев лучше передать "неопределено" и впоспользоваться процедурой формирования колонок
//	ТекстЗапроса	- Строка - если не заполнен, то обязательно должен быть заполнен параметр ТаблицаСписка
//	ПараметрыЗапроса - Структура - Содержит параметры для запроса, где ключ - имя параметры, а значение соответственно
//	ОсновнаяТаблицаСписка	- Строка - имя таблицы списка,
//	СвояКоманднаяПанель - Булево - используется если требуется снять флаг "Автозаполнение" и наполнить самостоятельно
//					Из-за специфики работы, нет программной возможности снятия флага "Автозаполнение", по этому создается своя командная панель, а стандартная скрывается полностью.
//					Имя новой командной панели <Имя>+"КоманднаяПанель2"
//	ВставитьПеред	- Строка, ЭлементФормы - Элемент, перед которым требуется вставить новый элемент. Имя элемента или элемент формы.
//	СтруктураСвойств - Структура - см. параметры метода ДобавитьПоле.
//	СтруктураСобытий - Структура - см. параметры метода ДобавитьПоле.
// 
// Возвращаемое значение:
//  ТаблицаФормы - Добавленная таблица.
//
Функция ДобавитьДинамическийСписок(
		Форма,
		Имя,
		Родитель = Неопределено,
		СтруктураКолонок = Неопределено,
		ТекстЗапроса = "",
		ПараметрыЗапроса = Неопределено,
		ОсновнаяТаблицаСписка = "",
		СвояКоманднаяПанель = Ложь,
		ВставитьПеред = Неопределено,
		СтруктураСвойств = Неопределено,
		СтруктураСобытий = Неопределено
		) Экспорт
		
	ДобавитьРеквизит(Форма, Имя, ОписаниеТипаДинамическийСписок());
	РеквизитДинамическийСписок = Форма[Имя];
	РеквизитДинамическийСписок.ОсновнаяТаблица = ОсновнаяТаблицаСписка;

	Если Не ПустаяСтрока(ТекстЗапроса) Тогда
		РеквизитДинамическийСписок.ПроизвольныйЗапрос = Истина;
		РеквизитДинамическийСписок.ТекстЗапроса = ТекстЗапроса;
	КонецЕсли;
	
	Если Не ПараметрыЗапроса = Неопределено Тогда
		УстановитьПараметрыЗапросаДинамическогоСписка(РеквизитДинамическийСписок, ПараметрыЗапроса);
	КонецЕсли;
	
	ТаблицаФормы = ДобавитьТаблицуФормы(
		Форма,
		Имя,
		Родитель,
		Имя,
		СтруктураКолонок,
		СвояКоманднаяПанель,
		ВставитьПеред,
		СтруктураСвойств,
		СтруктураСобытий);
	
	Возврат ТаблицаФормы;
	
КонецФункции

// Добавляет Таблицу формы
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма.
//	ИмяТаблицы - Строка - Имя будущей таблицы
//	Родитель	- Строка, ЭлементФормы - Имя элемента или элемент формы.
//	ПутьКДанным - Строка - Путь к данным реквизита
//	СтруктураКолонок 	- Структура, Неопределено -
//			* Ключ - имя колонки,
//			* Значение - заголовок колонки.
//	СвояКоманднаяПанель - Булево - используется если требуется снять флаг "Автозаполнение" и наполнить самостоятельно
//					Из-за специфики работы, нет программной возможности снятия флага "Автозаполнение",
//					поэтому создается своя командная панель, а стандартная скрывается полностью.
//					Имя новой командной панели <Имя>+"КоманднаяПанельМодифицированная".
//					Имя группы, в которую помещается таблица с командной панелью: "Группа" + <Имя> + "МодификацияКоманднойПанели"
//	ВставитьПеред	- Строка, ЭлементФормы - Элемент, перед которым требуется вставить новый элемент. Имя элемента или элемент формы.
//	СтруктураСвойств - Структура - Содержит значения свойств, где ключ имя свойства.
//	СтруктураСобытий - Структура - Содержит значения событий, где ключ имя события и в значение название процедуры тип "строка"
// 
// Возвращаемое значение:
//  ТаблицаФормы - Добавленная таблица.
//
Функция ДобавитьТаблицуФормы(
		Форма,
		ИмяТаблицы,
		Родитель,
		ПутьКДанным,
		СтруктураКолонок = Неопределено,
		СвояКоманднаяПанель = Ложь,
		ВставитьПеред = Неопределено,
		СтруктураСвойств = Неопределено,
		СтруктураСобытий = Неопределено
		) Экспорт
	
	ЭлементРодитель = НайтиЭлементФормы(Форма, Родитель);
	ЭлементВставитьПеред = НайтиЭлементФормы(Форма, ВставитьПеред);

	ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Авто;
	
	Если СвояКоманднаяПанель Тогда
		ГруппаДинамическогоСписка = ДобавитьОбычнуюГруппу(
			Форма,
			"Группа" + ИмяТаблицы + "МодификацияКоманднойПанели",
			,
			ЭлементРодитель,
			ЭлементВставитьПеред,
			ГруппировкаПодчиненныхЭлементовФормы.Вертикальная,
			Истина,
			Истина);
		КоманднаяПанельСписка = ДобавитьКоманднуюПанель(
			Форма,
			ИмяТаблицы + "КоманднаяПанельМодифицированная",
			ГруппаДинамическогоСписка);
			
		ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
		ЭлементРодитель = ГруппаДинамическогоСписка;
		ЭлементВставитьПеред = Неопределено;
	КонецЕсли;
	
	ТаблицаФормы = ДобавитьЭлементФормы(
		Форма,
		ИмяТаблицы,
		Тип("ТаблицаФормы"),
		ЭлементРодитель,
		ЭлементВставитьПеред);
		
	ТаблицаФормы.ПоложениеКоманднойПанели = ПоложениеКоманднойПанели;
	ТаблицаФормы.ПутьКДанным = ПутьКДанным;
	
	Если Не СтруктураКолонок = Неопределено Тогда
		ДобавитьКолонкиТаблицыФормы(Форма, ТаблицаФормы, СтруктураКолонок);
	КонецЕсли;
	
	УстановитьСвойстваЭлементу(ТаблицаФормы, СтруктураСвойств);
	УстановитьСобытияЭлементу(ТаблицаФормы, СтруктураСобытий);
	
	Возврат ТаблицаФормы;
	
КонецФункции

// Добавляет колонку Таблицы формы
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма.
//	ТаблицаФормы - ЭлементФормы - Элемент таблица формы, в которую добавляются колонки
//	СтруктураКолонок - Структура - Описание добавляемых колонок
//						*Ключ - Имя колонки.
//						*Значение - Представление колонки. 
//						Может быть пустым (Неопределено), тогда представление колонки будет сформировано системой автоматически.
//
Процедура ДобавитьКолонкиТаблицыФормы(Форма, ТаблицаФормы, СтруктураКолонок)
	
	ПутьКДаннымТаблицы = ТаблицаФормы.ПутьКДанным;
	ЭтоДинамическийСписок = ТипЗнч(Форма[ТаблицаФормы.ПутьКДанным]) = Тип("ДинамическийСписок");
	ВидПоляКолонки = ?(ЭтоДинамическийСписок, ВидПоляФормы.ПолеНадписи, ВидПоляФормы.ПолеВвода);
	
	Для Каждого Колонка Из СтруктураКолонок Цикл
		ДобавитьКолонкуЭлемента(
			Форма,
			Колонка.Ключ,
			ТаблицаФормы,
			ПутьКДаннымТаблицы + "." + Колонка.Ключ,
			ВидПоляКолонки,
			Колонка.Значение);
	КонецЦикла;
	
КонецПроцедуры

// Добавляет колонку Таблицы формы
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма.
//	ИмяКолонки - Строка - Имя будущей колонки
//	Родитель - Строка, ЭлементФормы - Имя или элемент формы, в котором добавляется клолонка
//	ПутьКДанным - Строка - Путь к данным, не забывайте про точку и "Объект", пример "Объект.Товары.Номенклатура"
//	ВидПоля - ВидПоляФормы -
//		Применимые значения:
//			* Поле вводы
//			* Поле надписи
//			* Поле флажка
//			* Поле картинки
//	Заголовок - Строка - Заголовок колонки.
//	ОтображатьШапку - Булево - Отображение шапки колонки.
//	ОтображатьПодвал - Булево - Отображение подвала колонки.
//	ВставитьПеред	- Строка, ЭлементФормы - Элемент, перед которым требуется вставить новый элемент. Имя элемента или элемент формы.
//	СтруктураСвойств - Структура - Содержит значения свойств, где ключ имя свойства.
//	СтруктураСобытий - Структура - Содержит значения событий, где ключ имя события и в значение название процедуры тип "строка"
// 
// Возвращаемое значение:
//  ПолеФормы - Добавленная колонка таблицы.
//
Функция ДобавитьКолонкуЭлемента(
		Форма,
		ИмяКолонки,
		Родитель,
		ПутьКДанным,
		ВидПоля = Неопределено,
		Заголовок = Неопределено,
		ОтображатьШапку = Истина,
		ОтображатьПодвал = Ложь,
		ВставитьПеред = Неопределено,
		СтруктураСвойств = Неопределено,
		СтруктураСобытий = Неопределено
		) Экспорт
	
	ЭлементРодитель = НайтиЭлементФормы(Форма, Родитель);
	ЭлементВставитьПеред = НайтиЭлементФормы(Форма, ВставитьПеред);
	
	НовыйЭлемент = ДобавитьЭлементФормы(
		Форма,
		ИмяКолонки,
		Тип("ПолеФормы"),
		ЭлементРодитель,
		ЭлементВставитьПеред);
		
	НовыйЭлемент.Вид = ?(ВидПоля = Неопределено, ВидПоляФормы.ПолеВвода, ВидПоля);
	НовыйЭлемент.ПутьКДанным = ПутьКДанным;
	НовыйЭлемент.ОтображатьВШапке = ОтображатьШапку;
	НовыйЭлемент.ОтображатьВПодвале = ОтображатьПодвал;
	Если Не Заголовок = Неопределено Тогда
		НовыйЭлемент.Заголовок = Заголовок;
	КонецЕсли;
	
	УстановитьСвойстваЭлементу(НовыйЭлемент, СтруктураСвойств);
	УстановитьСобытияЭлементу(НовыйЭлемент, СтруктураСобытий);
	
	Возврат НовыйЭлемент;
	
КонецФункции

// Добавляет группу колонок
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма.
//	Имя - Строка - Уникальное имя добавляемого элемента.
//	Родитель	- Строка, ЭлементФормы - Имя элемента или элемент формы.
//	ГруппировкаКолонокЭлемента - ГруппировкаКолонок, Неопределено - Принимаемые значения:
//					* Неопределено - Авто
//					* Горизонтальная
//					* Вертикальная
//					* В ячейке
//	РастягиватьПоГоризонтали - Булево, Неопределено - Принимаемые значения:
//					* Неопределено - Авто
//	ОтображатьВШапке - Булево - Если необходимо вывести заголовок
//	Заголовок - Строка - Заголовок группы
//	ВставитьПеред	- Строка, ЭлементФормы - Элемент, перед которым требуется вставить новый элемент. Имя элемента или элемент формы.
//	СтруктураСвойств - Структура - Содержит значения свойств, где ключ имя свойства.
// 
// Возвращаемое значение:
//  ГруппаФормы - Добавленная группа колонок.
//
Функция ДобавитьГруппуКолонокТаблицыФормы(
		Форма,
		Имя,
		Родитель,
		ГруппировкаКолонокЭлемента = Неопределено,
		РастягиватьПоГоризонтали = Неопределено,
		ОтображатьВШапке = Ложь,
		Заголовок = Неопределено,
		ВставитьПеред = Неопределено,
		СтруктураСвойств = Неопределено
		) Экспорт
	
	ЭлементРодитель = НайтиЭлементФормы(Форма, Родитель);
	ЭлементВставитьПеред = НайтиЭлементФормы(Форма, ВставитьПеред);
	
	НовыйЭлемент = ДобавитьЭлементФормы(
		Форма,
		Имя,
		Тип("ГруппаФормы"),
		ЭлементРодитель,
		ЭлементВставитьПеред);
		
	НовыйЭлемент.Вид = ВидГруппыФормы.ГруппаКолонок;
	НовыйЭлемент.ОтображатьВШапке = ОтображатьВШапке;
	НовыйЭлемент.Группировка = ГруппировкаКолонокЭлемента;
	НовыйЭлемент.РастягиватьПоГоризонтали = РастягиватьПоГоризонтали;
	Если Не Заголовок = Неопределено Тогда
		НовыйЭлемент.Заголовок = Заголовок;
	КонецЕсли;
	
	УстановитьСвойстваЭлементу(НовыйЭлемент, СтруктураСвойств);
	
	Возврат НовыйЭлемент;
	
КонецФункции

#КонецОбласти


#Область Удаление

// Удаляет элемент формы.
// Только для  созданных программно.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма.
//  Имя - Строка - Имя элемента.
//
Процедура УдалитьЭлемент(Форма, Имя) Экспорт
	
	Элемент = Форма.Элементы.Найти(Имя);
	Если Элемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма.Элементы.Удалить(Элемент);
	
КонецПроцедуры

//Удаляет элемент и реквизит
// Только для  созданных программно.
//
//Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма.
//	Имя - Строка - Имя удаляемого элемента и реквизита на форме должны совпадать.
//
Процедура УдалитьЭлементИРеквизитФормы(Форма, Имя) Экспорт
	
	УдалитьРеквизит(Форма, Имя);
	УдалитьЭлемент(Форма, Имя);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СвойстваСобытия
// Методы в этом блоке могут быть удобны при создании большого количества схожих элементов

// Устанавливает свойства элемента
//
// Параметры:
//  Элемент				- ЭлементФормы - элемент, которому будут установлены свойства
//  СтруктураСвойств	- Структура - структура устанавливаемых свойств (см., например, СтруктураСвойствПоляОсновные), где
//						*Ключ - имя свойства
//						*Значение - Значение свойства
//
Процедура УстановитьСвойстваЭлементу(Элемент, СтруктураСвойств) Экспорт
	
	Если СтруктураСвойств = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Для Каждого тСвойство Из СтруктураСвойств Цикл
		Если Не ЕстьРеквизитИлиСвойствоОбъекта(Элемент, тСвойство.Ключ) Тогда
			Продолжить;
		КонецЕсли;
		Элемент[тСвойство.Ключ] = тСвойство.Значение;
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает события элемента
//
// Параметры:
//  Элемент				- ЭлементФормы - элемент, которому будут установлены свойства
//  СтруктураСвойств	- Структура - структура устанавливаемых событий, где
//						*Ключ - имя события (см. события элемента в палитре свойств)
//						*Значение - Значение события
//
Процедура УстановитьСобытияЭлементу(Элемент, СтруктураСобытий) Экспорт
	
	Если СтруктураСобытий = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого тСвойство Из СтруктураСобытий Цикл
		Элемент.УстановитьДействие(тСвойство.Ключ, тСвойство.Значение);
	КонецЦикла;
	
КонецПроцедуры

// Основные свойства поля ввода
//
// Параметры:
//	Заголовок - Строка - Заголовок поля на форме
//	Вид - ВидПоляФормы - Вид поля формы клиентского приложения
//	ПутьКДанным - Строка - Путь к данным реквизита формы или объекта
//	ПоложениеЗаголовка - ПоложениеЗаголовкаЭлементаФормы - Определяет положение заголовка относительно поля в макете формы.
//		Следует заметить, что для отключения вывода заголовка следует установить это свойство в значение Нет.
//	Видимость - Булево - Видимость элемента на форме
//	Доступность - Булево - Доступность элемента на форме
//	ТолькоПросмотр - Булево - Только просмотр элемента на форме
//	ПропускатьПриВводе - Булево - Указывает необходимость пропуска поля при вводе данных
//		* Неопределено - Авто
//	АктивизироватьПоУмолчанию - Булево - Если свойство установлено, данный элемент будет активизирован при открытии формы
//	ВажностьПриОтображении - ВажностьПриОтображении - Указывает важность элемента при отображении (используется для адаптации формы к ширине экрана мобильного устройства)
//	Маска - Строка - (Поле ввода) Содержит посимвольную строку маски интерактивного ввода текста в поле.
//		*В строке маски допустимо использование следующих специальных символов:
//			! - любой введенный символ преобразуется в верхний регистр;
//			9 - допустимо ввести произвольный символ цифры;
//			# - допустимо ввести произвольный символ цифры или - (знак минус) или + (знак плюс) или пробел;
//			N - допустимо ввести любые алфавитно-цифровые символы (буквы или цифры);
//			U - допустимо ввести любые алфавитно-цифровые символы (буквы или цифры) и любой введенный символ преобразуется в верхний регистр;
//			X (латинского алфавита) - допустимо ввести произвольный символ;
//			^ - недопустимо вводить этот символ интерактивно пользователем, он может устанавливаться только из языка;
//			h - допустим ввод символов обозначения шестнадцатеричных цифр;
//			@ - допустимо ввести любые алфавитно-цифровые символы (буквы или цифры) в верхнем регистре или пробел.
//		Если в маске из специальных символов используются только символы "@", то все символы текста, соответствующие символам маски,
//		не являющимся специальными символами, удаляются после последнего непустого блока из символов "@".
//		Например, при маске "@@.@@.@@." текст "41. 2. ." преобразуется в "41.2".
//		Для того, чтобы использовать в маске один из специальных символов, нужно использовать перед ним символ "\".
//		Допускается указание нескольких масок в одном параметре. Маски разделяются символом ";".
//		В этом случае использоваться будет та маска, к которой подходит введенный текст.
//	РежимПароля  - Булево, Неопределено - (Поле ввода, поле надписи) Содержит признак специального режима для ввода пароля,
//			в котором все вводимые символы отображаются символом "*" (звездочка).
//		* Неопределено - Авто
//	МногострочныйРежим - Булево - Управляет многострочным режимом в поле ввода.
//	РасширенноеРедактирование - Булево - (Поле ввода) Если свойство установлено в Истина, то включается расширенный режим редактирования,
//		при котором само поле ввода обрабатывает нажатие клавиши TAB (в текст вставляется символ табуляции и переход к следующему полю не происходит),
//		а также доступен поиск по тексту с помощью стандартных действий.
//	Гиперссылка - Булево - (Поле надписи, поле картинки) можно обработать событие гиперссылки "ОбработкаНавигационнойСсылки"
//
Функция СтруктураСвойствПоляОсновные(
		Заголовок = Неопределено,
		Вид = Неопределено,
		ПутьКДанным = Неопределено,
		ПоложениеЗаголовка = Неопределено,
		Видимость = Неопределено,
		Доступность = Неопределено,
		ТолькоПросмотр = Неопределено,
		ПропускатьПриВводе = Неопределено,
		АктивизироватьПоУмолчанию = Неопределено,
		Маска = Неопределено,
		РежимПароля = Неопределено,
		МногострочныйРежим = Неопределено,
		РасширенноеРедактирование = Неопределено,
		Гиперссылка = Неопределено
		) Экспорт
	
	СтруктураСвойств = Новый Структура;
	
	Если Заголовок <> Неопределено Тогда
		СтруктураСвойств.Вставить("Заголовок", Заголовок)
	КонецЕсли;
	Если Вид <> Неопределено Тогда
		СтруктураСвойств.Вставить("Вид", Вид)
	КонецЕсли;
	Если ПутьКДанным <> Неопределено Тогда
		СтруктураСвойств.Вставить("ПутьКДанным", ПутьКДанным)
	КонецЕсли;
	Если ПоложениеЗаголовка <> Неопределено Тогда
		СтруктураСвойств.Вставить("ПоложениеЗаголовка", ПоложениеЗаголовка)
	КонецЕсли;
	Если Видимость <> Неопределено Тогда
		СтруктураСвойств.Вставить("Видимость", Видимость)
	КонецЕсли;
	Если Доступность <> Неопределено Тогда
		СтруктураСвойств.Вставить("Доступность", Доступность)
	КонецЕсли;
	Если ТолькоПросмотр <> Неопределено Тогда
		СтруктураСвойств.Вставить("ТолькоПросмотр", ТолькоПросмотр)
	КонецЕсли;
	Если ПропускатьПриВводе <> Неопределено Тогда
		СтруктураСвойств.Вставить("ПропускатьПриВводе", ПропускатьПриВводе)
	КонецЕсли;
	Если АктивизироватьПоУмолчанию <> Неопределено Тогда
		СтруктураСвойств.Вставить("АктивизироватьПоУмолчанию", АктивизироватьПоУмолчанию)
	КонецЕсли;
	Если Маска <> Неопределено Тогда
		СтруктураСвойств.Вставить("Маска", Маска)
	КонецЕсли;
	Если РежимПароля <> Неопределено Тогда
		СтруктураСвойств.Вставить("РежимПароля", РежимПароля)
	КонецЕсли;
	Если МногострочныйРежим <> Неопределено Тогда
		СтруктураСвойств.Вставить("МногострочныйРежим", МногострочныйРежим)
	КонецЕсли;
	Если РасширенноеРедактирование <> Неопределено Тогда
		СтруктураСвойств.Вставить("РасширенноеРедактирование", РасширенноеРедактирование)
	КонецЕсли;
	Если Гиперссылка <> Неопределено Тогда
		СтруктураСвойств.Вставить("Гиперссылка", Гиперссылка)
	КонецЕсли;
	
	Возврат СтруктураСвойств;
	
КонецФункции

// Свойства Подсказка
//
// Параметры:
//	Подсказка - Строка - Текст подсказки
//	ОтображениеПодсказки - ОтображениеПодсказки - Задает способ отображения подсказки элемента формы
//	ПодсказкаВвода - Строка - Текст подсказки ввода в поле формы
Функция СтруктураСвойствПоляПодсказка(Подсказка = Неопределено,
		ОтображениеПодсказки = Неопределено,
		ПодсказкаВвода = Неопределено) Экспорт
	
	СтруктураСвойств = Новый Структура;
	
	Если Подсказка <> Неопределено Тогда
		СтруктураСвойств.Вставить("Подсказка", Подсказка)
	КонецЕсли;
	Если ОтображениеПодсказки <> Неопределено Тогда
		СтруктураСвойств.Вставить("ОтображениеПодсказки", ОтображениеПодсказки)
	КонецЕсли;
	Если ПодсказкаВвода <> Неопределено Тогда
		СтруктураСвойств.Вставить("ПодсказкаВвода", ПодсказкаВвода)
	КонецЕсли;
	
	Возврат СтруктураСвойств;
	
КонецФункции

// Свойства размеров
//
// Параметры:
//	Ширина - Число - Ширина элемента
//	Высота - Число - Высота элемента
//	АвтоМаксимальнаяШирина - Булево - Отключение автоматической ширины
//	МаксимальнаяШирина - Число - Максимальная ширина элемента на форме, работает если АвтоМаксимальнаяШирина = Ложь
//	АвтоМаксимальнаяВысота - Булево - Отключение автоматической высоты
//	МаксимальнаяВысота - Число - Максимальная высота элемента на форме, работает если АвтоМаксимальнаяВысота = Ложь
//	РастягиватьПоГоризонтали - Булево - Если требуется принудительно задать автоматическое растягивание по ширине
//	РастягиватьПоВертикали - Булево - Если требуется принудительно задать автоматическое растягивание по высоте
//	ГоризонтальноеПоложение - ГоризонтальноеПоложениеЭлемента, Неопределено - Принимаемые значения:
//		* Неопределено - Авто
//		* Лево
//		* Центр
// 		* Право
//	ГоризонтальноеПоложениеВШапке - ГоризонтальноеПоложениеЭлемента, Неопределено - Принимаемые значения:
//		* Неопределено - Авто
//		* Лево
//		* Центр
// 		* Право
//	ГоризонтальноеПоложениеВПодвале - ГоризонтальноеПоложениеЭлемента, Неопределено - Принимаемые значения:
//		* Неопределено - Авто
//		* Лево
//		* Центр
// 		* Право
//
Функция СтруктураСвойствПоляРасположение(
		Ширина = Неопределено,
		Высота = Неопределено,
		АвтоМаксимальнаяШирина = Неопределено,
		МаксимальнаяШирина = Неопределено,
		АвтоМаксимальнаяВысота = Неопределено,
		МаксимальнаяВысота = Неопределено,
		РастягиватьПоГоризонтали = Неопределено,
		РастягиватьПоВертикали = Неопределено,
		ГоризонтальноеПоложение = Неопределено,
		ГоризонтальноеПоложениеВШапке = Неопределено,
		ГоризонтальноеПоложениеВПодвале = Неопределено) Экспорт
	
	СтруктураСвойств = Новый Структура;
	
	Если Ширина <> Неопределено Тогда
		СтруктураСвойств.Вставить("Ширина", Ширина);
	КонецЕсли;
	Если Высота <> Неопределено Тогда
		СтруктураСвойств.Вставить("Высота", Высота);
	КонецЕсли;
	Если АвтоМаксимальнаяШирина <> Неопределено Тогда
		СтруктураСвойств.Вставить("АвтоМаксимальнаяШирина", АвтоМаксимальнаяШирина);
	КонецЕсли;
	Если МаксимальнаяШирина <> Неопределено Тогда
		СтруктураСвойств.Вставить("МаксимальнаяШирина", МаксимальнаяШирина);
	КонецЕсли;
	Если АвтоМаксимальнаяВысота <> Неопределено Тогда
		СтруктураСвойств.Вставить("АвтоМаксимальнаяВысота", АвтоМаксимальнаяВысота);
	КонецЕсли;
	Если МаксимальнаяВысота <> Неопределено Тогда
		СтруктураСвойств.Вставить("МаксимальнаяВысота", МаксимальнаяВысота);
	КонецЕсли;
	Если РастягиватьПоГоризонтали <> Неопределено Тогда
		СтруктураСвойств.Вставить("РастягиватьПоГоризонтали", РастягиватьПоГоризонтали);
	КонецЕсли;
	Если РастягиватьПоВертикали <> Неопределено Тогда
		СтруктураСвойств.Вставить("РастягиватьПоВертикали", РастягиватьПоВертикали);
	КонецЕсли;
	Если ГоризонтальноеПоложение <> Неопределено Тогда
		СтруктураСвойств.Вставить("ГоризонтальноеПоложение", ГоризонтальноеПоложение);
	КонецЕсли;
	Если ГоризонтальноеПоложениеВШапке <> Неопределено Тогда
		СтруктураСвойств.Вставить("ГоризонтальноеПоложениеВШапке", ГоризонтальноеПоложениеВШапке);
	КонецЕсли;
	Если ГоризонтальноеПоложениеВПодвале <> Неопределено Тогда
		СтруктураСвойств.Вставить("ГоризонтальноеПоложениеВПодвале", ГоризонтальноеПоложениеВПодвале);
	КонецЕсли;
	
	Возврат СтруктураСвойств;
	
КонецФункции

// Свойства Таблицы формы
//
// Параметры:
//	Отображение - ОтображениеТаблицы - Отображение данных в таблице
//	РежимВводаСтрок - РежимВводаСтрокТаблицы - Режим ввода строк в таблице
//	РежимВыделения - РежимВыделенияТаблицы - Определяет режим выделения строк в таблице
//	РежимВыделенияСтроки - РежимВыделенияСтрокиТаблицы - Определяет режим выделения строки в таблице
//	Шапка - Булево - Определяет наличие шапки у таблицы
//	Подвал - Булево - Определяет наличие подвала у таблицы
//	АвтоВводНовойСтроки - Булево - Содержит признак автоматического ввода новой строки после заполнения текущей
//	ВысотаВСтрокахТаблицы - Число - Содержит высоту таблицы.
//		Задается в строках. Указывает количество строк, отображаемых в области данных таблицы.
//		Таблица занимает такую высоту, чтобы разместились шапка, подвал и заданное число строк в области данных.
//		Число строк в общем случае не является числом записей данных, отображаемых в таблице,
//		так как одна запись данных может выводиться в несколько строк таблицы.
//		Более того, разные строки данных могут занимать разную высоту.
//
Функция СтруктураСвойствТаблицыФормы(
		Отображение = Неопределено,
		РежимВводаСтрок = Неопределено,
		РежимВыделения = Неопределено,
		РежимВыделенияСтроки = Неопределено,
		Шапка = Неопределено,
		Подвал = Неопределено,
		АвтоВводНовойСтроки = Неопределено,
		ВысотаВСтрокахТаблицы = Неопределено) Экспорт
	
	СтруктураСвойств = Новый Структура;
	
	Если Отображение <> Неопределено Тогда
		СтруктураСвойств.Вставить("Отображение", Отображение);
	КонецЕсли;
	Если РежимВводаСтрок <> Неопределено Тогда
		СтруктураСвойств.Вставить("РежимВводаСтрок", РежимВводаСтрок);
	КонецЕсли;
	Если РежимВыделения <> Неопределено Тогда
		СтруктураСвойств.Вставить("РежимВыделения", РежимВыделения);
	КонецЕсли;
	Если РежимВыделенияСтроки <> Неопределено Тогда
		СтруктураСвойств.Вставить("РежимВыделенияСтроки", РежимВыделенияСтроки);
	КонецЕсли;
	Если Шапка <> Неопределено Тогда
		СтруктураСвойств.Вставить("Шапка", Шапка);
	КонецЕсли;
	Если Подвал <> Неопределено Тогда
		СтруктураСвойств.Вставить("Подвал", Подвал);
	КонецЕсли;
	Если АвтоВводНовойСтроки <> Неопределено Тогда
		СтруктураСвойств.Вставить("АвтоВводНовойСтроки", АвтоВводНовойСтроки);
	КонецЕсли;
	Если ВысотаВСтрокахТаблицы <> Неопределено Тогда
		СтруктураСвойств.Вставить("ВысотаВСтрокахТаблицы", ВысотаВСтрокахТаблицы);
	КонецЕсли;
	
	Возврат СтруктураСвойств;
	
КонецФункции

#КонецОбласти

 #Область ВспомогательныеФункции

// Выполняет поиск элемента, если передано имя
Функция НайтиЭлементФормы(Форма, ЭлементИлиИмя)
	
	НайденныйЭлемент = ЭлементИлиИмя;
	
	Если ТипЗнч(ЭлементИлиИмя) = Тип("Строка") Тогда
		НайденныйЭлемент = Форма.Элементы.Найти(ЭлементИлиИмя);
	КонецЕсли;
	
	Возврат НайденныйЭлемент;
	
КонецФункции

// Устанавливает параметры динамического списка
//
// Параметры:
//  ДинамическийСписок	 - ДинамическийСписок - Динамический список, которому будут установлнеы параметры
//  ПараметрыЗапроса	 - Структура - Устанавливаемые параметры, где:
//						*Ключ - Имя параметра
//						*Значение - Значение параметра
//
Процедура УстановитьПараметрыЗапросаДинамическогоСписка(ДинамическийСписок, ПараметрыЗапроса) Экспорт
	
	Для Каждого Параметр из ПараметрыЗапроса Цикл
		ДинамическийСписок.Параметры.УстановитьЗначениеПараметра(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;
	
КонецПроцедуры

// Генерирует уникальное имя
// например, для использования при динамическом формировании элементов
//
// Параметры:
//  ИмяОсновнаяЧасть - Строка - основная часть имени, например, вид элемента
// 
// Возвращаемое значение:
//  Строка - Сгенерированное уникальное имя
//
Функция УникальноеИмя(ИмяОсновнаяЧасть = "УникальноеИмя") Экспорт
	
	ИмяУникальнаяЧасть = СтрЗаменить(ВРег(Строка(Новый УникальныйИдентификатор())), "-", "x");
	Возврат ИмяОсновнаяЧасть + "_" + ИмяУникальнаяЧасть;

КонецФункции

#Область Служебные_БСП_ОбщегоНазначенияКлиентСервер

#Область Служебные_ОтсутствуетБСП
// Для совместимости с конфигурациями без БСП
// Использовать методы этой область, если в конфигурации внедрена БСП

// Проверяет наличие реквизита или свойства у произвольного объекта без обращения к метаданным.
//
// Параметры:
//  Объект       - Произвольный - объект, у которого нужно проверить наличие реквизита или свойства;
//  ИмяРеквизита - Строка       - имя реквизита или свойства.
//
// Возвращаемое значение:
//  Булево - Истина, если есть.
//
Функция ЕстьРеквизитИлиСвойствоОбъекта(Объект, ИмяРеквизита) Экспорт
	
	КлючУникальности   = Новый УникальныйИдентификатор;
	СтруктураРеквизита = Новый Структура(ИмяРеквизита, КлючУникальности);
	ЗаполнитьЗначенияСвойств(СтруктураРеквизита, Объект);
	
	Возврат СтруктураРеквизита[ИмяРеквизита] <> КлючУникальности;
	
КонецФункции

// Создает массив и помещает в него переданное значение.
//
// Параметры:
//  Значение - Произвольный - любое значение.
//
// Возвращаемое значение:
//  Массив - массив из одного элемента.
//
Функция ЗначениеВМассиве(Значение) Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить(Значение);
	
	Возврат Массив;
	
КонецФункции

#КонецОбласти

#Область Служебные_ВнедренаБСП
// Для совместимости с конфигурациями без БСП
// Использовать методы этой область, если в конфигурации внедрена БСП
#Если Не Сервер И Сервер Тогда

// см. ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта
//
Функция ЕстьРеквизитИлиСвойствоОбъекта(Объект, ИмяРеквизита) Экспорт
	
	Возврат ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, ИмяРеквизита);
	
КонецФункции

// см. ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта
//
Функция ЗначениеВМассиве(Значение) Экспорт
	
	Возврат ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Значение);
	
КонецФункции

#КонецЕсли

#КонецОбласти
#КонецОбласти
#КонецОбласти